{"version":3,"file":"ngx-chronometer.umd.js","sources":["../../../src/lib/ngx-chronometer.ts","../../../src/lib/ngx-chronometer.directive.ts","../../../src/lib/ngx-chronometer.module.ts","../../../src/public-api.ts","../../../src/ngx-chronometer.ts"],"sourcesContent":["import { Subject, Subscription } from 'rxjs';\nexport enum TimeChonometer {\n    timemedio = 0,\n    timeone = 1,\n    timetwo = 2\n}\n\nexport enum StatusChonometer {\n    desactived = 0,\n    pause = 1,\n    start = 2,\n    finish = 3,\n    restart = 4,\n    stop = 5,\n    refresh = 6\n}\nexport class Chronometer {\n    id: number;\n    second: number;\n    limitSecond: number;\n    status: StatusChonometer;\n    timeLabel: TimeChonometer;\n    maxSecond: number;\n    maxMinute: number;\n    maxHour: number;\n    time: Array<number> = new Array<number>(0, 0, 0);\n    onChronometer: Subject<Chronometer> = new Subject<Chronometer>();\n    intervalSub: Subscription;\n    /**\n     * @description Constructor of class\n     * @param o Object default = {}\n     */\n    constructor(o: any = {}) {\n        this.id = o.id;\n        this.second = o.second || 0;\n        this.status = o.status || StatusChonometer.pause;\n        this.timeLabel = o.timeLabel;\n        this.maxSecond = o.maxSecond || 60;\n        this.maxMinute = o.maxMinute || 60;\n        this.maxHour = o.maxHour || 60;\n        this.limitSecond = o.limitSecond;\n    }\n\n    start() {\n        this.status = StatusChonometer.start;\n        this.onChronometer.next(this);\n    }\n\n    pause() {\n        this.status = StatusChonometer.pause;\n        this.onChronometer.next(this);\n    }\n\n    restart() {\n        this.status = StatusChonometer.restart;\n        this.onChronometer.next(this);\n    }\n\n    stop() {\n        this.status = StatusChonometer.stop;\n        this.onChronometer.next(this);\n    }\n\n    refresh() {\n        this.onChronometer.next(this);\n    }\n}","import { Directive, Input, OnInit, OnDestroy, Output, EventEmitter } from '@angular/core';\nimport { Chronometer, StatusChonometer } from './ngx-chronometer';\nimport { Subscription, interval, Subject } from 'rxjs';\nimport * as _ from 'lodash';\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[chronometer]',\n  // tslint:disable-next-line:no-host-metadata-property\n  host: {\n    '[innerText]': 'innerText'\n  }\n})\nexport class NgxChronometerDirective implements OnInit, OnDestroy {\n\n  // tslint:disable-next-line:variable-name\n  _chronometer: Chronometer = new Chronometer();\n\n  /** sequence the time default 1000 = 1 second */\n  @Input() interval = 1000;\n  /** increment 1 unit */\n  @Input() increment = 1;\n  /** limit in second stop sequence the time */\n  @Input() limitSecond: number;\n  /** maximal second to step minute */\n  @Input() maxSecond: number;\n  /** maximal minute to step hour */\n  @Input() maxMinute: number;\n  /** maximal hour to reset chronometer */\n  @Input() maxHour: number;\n  /** maximal hour to reset chronometer */\n  @Input() isMinutes: boolean;\n  /** object chronometer */\n  @Input() set chronometer(chronometer: Chronometer) {\n    chronometer = chronometer || new Chronometer();\n    chronometer.maxSecond = this.maxSecond || chronometer.maxSecond || 60;\n    chronometer.maxMinute = this.maxMinute || chronometer.maxMinute || 60;\n    chronometer.maxHour = this.maxHour || chronometer.maxHour || 60;\n    chronometer.time = new Array<number>(0, 0, 0);\n    this._chronometer = this.activated(this.currentSecond(chronometer));\n  }\n  /** format to use default 00:00:00 custom 00/00/00 or other delimiter */\n  @Input() format = '00:00:00';\n  /** activated emit event sequence chronometer default false */\n  @Input() chronoEvents = false;\n\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() onChronoEvent = new EventEmitter<Chronometer>();\n\n  private chronoSub: Subscription;\n\n  constructor() { }\n\n  ngOnInit(): void {\n    // tslint:disable-next-line:max-line-length\n    if (this._chronometer.onChronometer.observers == null) {\n      this._chronometer.onChronometer = new Subject<Chronometer>();\n    }\n    this.chronoSub = this._chronometer.onChronometer.subscribe((chronometer: Chronometer) => {\n      this._chronometer = this.activated(this.currentSecond(chronometer));\n    });\n  }\n\n  /**\n   * @description current seconds\n   * @param chronometer object current chronometer\n   * @see {Chronometer}\n   */\n  currentSecond(chronometer: Chronometer): Chronometer {\n    const limitSecond = this.limitSecond || chronometer.limitSecond;\n    if (limitSecond && chronometer.second > limitSecond) {\n      chronometer.second = limitSecond;\n      chronometer.pause();\n      this._chronometer = chronometer;\n      if (this._chronometer.intervalSub) {\n        this._chronometer.intervalSub.unsubscribe();\n      }\n      this._chronometer.intervalSub = undefined;\n    }\n    return chronometer;\n  }\n\n  /**\n   * @description activated chronometer\n   * @param chronometer object current chronometer\n   * @see {Chronometer}\n   */\n  private activated(chronometer: Chronometer = this._chronometer): Chronometer {\n    switch (chronometer.status) {\n      case StatusChonometer.pause:\n        this._chronometer = this.pause(chronometer); break;\n      case StatusChonometer.start:\n        this._chronometer = this.start(this.pause(chronometer));\n        break;\n      case StatusChonometer.restart:\n        chronometer.second = 0;\n        this._chronometer = this.start(chronometer);\n        break;\n      case StatusChonometer.stop:\n        chronometer.second = 0;\n        this._chronometer = this.pause(chronometer);\n        break;\n      default:\n        break;\n    }\n    return this.setTime(chronometer, 0);\n  }\n\n  /**\n   * @description pause seconds\n   * @param chronometer object current chronometer\n   * @see {Chronometer}\n   */\n  private pause(chronometer: Chronometer): Chronometer {\n    return this.stop(chronometer);\n  }\n\n  /**\n   * @description stop seconds\n   * @param chronometer object current chronometer\n   * @see {Chronometer}\n   */\n  private stop(chronometer): Chronometer {\n    if (chronometer.intervalSub) {\n      chronometer.intervalSub.unsubscribe();\n      chronometer.intervalSub = undefined;\n    }\n    return chronometer;\n  }\n\n  /**\n   * @description start seconds\n   * @param chronometer object current chronometer\n   * @see {Chronometer}\n   */\n  private start(chronometer: Chronometer): Chronometer {\n    chronometer.status = 2;\n    if (!chronometer.intervalSub) {\n      chronometer.intervalSub = interval(this.interval).subscribe(() => {\n        chronometer = this.currentSecond(this.setTime(chronometer));\n      });\n    }\n    return chronometer;\n  }\n\n  /**\n   * @description inner the text element\n   * @see {Chronometer}\n   */\n  get innerText(): string {\n    const sep = (this.format || '').split('00');\n    const a = this.isMinutes ? 1 : 0;\n    switch (sep.length) {\n      case 1: return `${sep[0]}${this.timeFormat[a]}${sep[1]}`;\n      case 2: return `${sep[0]}${this.timeFormat[a]}${sep[1]}`;\n      case 3: return `${sep[0]}${this.timeFormat[1]}${sep[1]}${this.timeFormat[0]}${sep[2]}`;\n      case 4: return `${sep[0]}${this.timeFormat[2]}${sep[1]}${this.timeFormat[1]}${sep[2]}${this.timeFormat[0]}${sep[3]}`;\n      default: return `${sep[0]}${this.timeFormat[2]}${sep[1]}${this.timeFormat[1]}${sep[2]}${this.timeFormat[0]}${sep[3]}`;\n    }\n  }\n\n  /**\n   * @description format array time\n   * @see {Chronometer}\n   */\n  get timeFormat(): Array<string> {\n    const time = this._chronometer.time;\n    return Array<string>(\n      this.formatNumber(time[2]),\n      this.formatNumber(time[1]),\n      this.formatNumber(time[0])\n    );\n  }\n\n  /**\n   * @description return string 2 digit\n   * @param n number to format\n   */\n  formatNumber(n: number): string {\n    return `${n > 9 ? n : `0${n}`}`;\n  }\n\n  /**\n   * @description validator number\n   * @param n number to valid\n   */\n  validNumber(n: number) {\n    const enc = !_.isNaN(_.isNumber(n)) && n > 0;\n    if (!enc) {\n      console.error('Outdid maximo time no valid', n);\n      this._chronometer.pause();\n    }\n    return enc ? n : 60;\n  }\n\n  /**\n   * @description\n   * @param chronometer object current chronometer\n   * @see {Chronometer}\n   * @param second increment the time\n   * @see {increment} default [increment]=\"1\"\n   */\n  private setTime(chronometer: Chronometer, second = this.increment): Chronometer {\n    if (chronometer.second >= 0) {\n      chronometer.second = chronometer.second + second;\n      const diffSS = this.validNumber(chronometer.maxSecond);\n      const diffMM = this.validNumber(chronometer.maxMinute);\n      const hh = Math.trunc((chronometer.second / this.validNumber(chronometer.maxSecond)) / this.validNumber(chronometer.maxMinute));\n      const mm = Math.trunc(chronometer.second / this.validNumber(chronometer.maxSecond)) - hh * diffMM;\n      const ss = chronometer.second - Math.trunc(chronometer.second / diffSS) * diffSS;\n      if (hh === chronometer.maxHour) {\n        chronometer.second = 0;\n        chronometer.time = new Array(0, 0, 0);\n      } else {\n        chronometer.time = new Array(hh, mm, ss);\n      }\n    }\n    if (this.chronoEvents) {\n      this.onChronoEvent.emit(chronometer);\n    }\n    return chronometer;\n  }\n\n  ngOnDestroy() {\n    if (this.chronoSub) {\n      this.chronoSub.unsubscribe();\n    }\n    if (this._chronometer.intervalSub) {\n      this._chronometer.intervalSub.unsubscribe();\n    }\n    this._chronometer.onChronometer.unsubscribe();\n  }\n\n}\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { NgxChronometerDirective } from './ngx-chronometer.directive';\n\n\n@NgModule({\n  declarations: [NgxChronometerDirective],\n  imports: [],\n  exports: [NgxChronometerDirective],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class NgxChronometerModule { }\n","/*\n * Public API Surface of ngx-chronometer\n */\nexport * from './lib/ngx-chronometer';\nexport * from './lib/ngx-chronometer.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {NgxChronometerDirective as ɵa} from './lib/ngx-chronometer.directive';"],"names":["TimeChonometer","StatusChonometer","Subject","EventEmitter","interval","_.isNaN","_.isNumber","Directive","Input","Output","NgModule","CUSTOM_ELEMENTS_SCHEMA"],"mappings":"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"}