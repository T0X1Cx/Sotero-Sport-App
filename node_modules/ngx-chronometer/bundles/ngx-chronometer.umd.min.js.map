{"version":3,"sources":["../../../src/lib/ngx-chronometer.ts","../../../src/lib/ngx-chronometer.directive.ts","../../../src/lib/ngx-chronometer.module.ts"],"names":["TimeChonometer","StatusChonometer","Chronometer","o","this","time","Array","onChronometer","Subject","id","second","status","pause","timeLabel","maxSecond","maxMinute","maxHour","limitSecond","prototype","start","next","restart","stop","refresh","NgxChronometerDirective","_chronometer","interval","increment","format","chronoEvents","onChronoEvent","EventEmitter","Object","defineProperty","chronometer","activated","currentSecond","ngOnInit","_this","observers","chronoSub","subscribe","intervalSub","unsubscribe","undefined","setTime","sep","split","a","isMinutes","length","timeFormat","formatNumber","n","validNumber","enc","_.isNaN","_.isNumber","console","error","diffSS","diffMM","hh","Math","trunc","mm","ss","emit","ngOnDestroy","Directive","args","selector","host","[innerText]","Input","Output","NgModule","declarations","imports","exports","schemas","CUSTOM_ELEMENTS_SCHEMA"],"mappings":"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","sourcesContent":["import { Subject, Subscription } from 'rxjs';\nexport enum TimeChonometer {\n    timemedio = 0,\n    timeone = 1,\n    timetwo = 2\n}\n\nexport enum StatusChonometer {\n    desactived = 0,\n    pause = 1,\n    start = 2,\n    finish = 3,\n    restart = 4,\n    stop = 5,\n    refresh = 6\n}\nexport class Chronometer {\n    id: number;\n    second: number;\n    limitSecond: number;\n    status: StatusChonometer;\n    timeLabel: TimeChonometer;\n    maxSecond: number;\n    maxMinute: number;\n    maxHour: number;\n    time: Array<number> = new Array<number>(0, 0, 0);\n    onChronometer: Subject<Chronometer> = new Subject<Chronometer>();\n    intervalSub: Subscription;\n    /**\n     * @description Constructor of class\n     * @param o Object default = {}\n     */\n    constructor(o: any = {}) {\n        this.id = o.id;\n        this.second = o.second || 0;\n        this.status = o.status || StatusChonometer.pause;\n        this.timeLabel = o.timeLabel;\n        this.maxSecond = o.maxSecond || 60;\n        this.maxMinute = o.maxMinute || 60;\n        this.maxHour = o.maxHour || 60;\n        this.limitSecond = o.limitSecond;\n    }\n\n    start() {\n        this.status = StatusChonometer.start;\n        this.onChronometer.next(this);\n    }\n\n    pause() {\n        this.status = StatusChonometer.pause;\n        this.onChronometer.next(this);\n    }\n\n    restart() {\n        this.status = StatusChonometer.restart;\n        this.onChronometer.next(this);\n    }\n\n    stop() {\n        this.status = StatusChonometer.stop;\n        this.onChronometer.next(this);\n    }\n\n    refresh() {\n        this.onChronometer.next(this);\n    }\n}","import { Directive, Input, OnInit, OnDestroy, Output, EventEmitter } from '@angular/core';\nimport { Chronometer, StatusChonometer } from './ngx-chronometer';\nimport { Subscription, interval, Subject } from 'rxjs';\nimport * as _ from 'lodash';\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[chronometer]',\n  // tslint:disable-next-line:no-host-metadata-property\n  host: {\n    '[innerText]': 'innerText'\n  }\n})\nexport class NgxChronometerDirective implements OnInit, OnDestroy {\n\n  // tslint:disable-next-line:variable-name\n  _chronometer: Chronometer = new Chronometer();\n\n  /** sequence the time default 1000 = 1 second */\n  @Input() interval = 1000;\n  /** increment 1 unit */\n  @Input() increment = 1;\n  /** limit in second stop sequence the time */\n  @Input() limitSecond: number;\n  /** maximal second to step minute */\n  @Input() maxSecond: number;\n  /** maximal minute to step hour */\n  @Input() maxMinute: number;\n  /** maximal hour to reset chronometer */\n  @Input() maxHour: number;\n  /** maximal hour to reset chronometer */\n  @Input() isMinutes: boolean;\n  /** object chronometer */\n  @Input() set chronometer(chronometer: Chronometer) {\n    chronometer = chronometer || new Chronometer();\n    chronometer.maxSecond = this.maxSecond || chronometer.maxSecond || 60;\n    chronometer.maxMinute = this.maxMinute || chronometer.maxMinute || 60;\n    chronometer.maxHour = this.maxHour || chronometer.maxHour || 60;\n    chronometer.time = new Array<number>(0, 0, 0);\n    this._chronometer = this.activated(this.currentSecond(chronometer));\n  }\n  /** format to use default 00:00:00 custom 00/00/00 or other delimiter */\n  @Input() format = '00:00:00';\n  /** activated emit event sequence chronometer default false */\n  @Input() chronoEvents = false;\n\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() onChronoEvent = new EventEmitter<Chronometer>();\n\n  private chronoSub: Subscription;\n\n  constructor() { }\n\n  ngOnInit(): void {\n    // tslint:disable-next-line:max-line-length\n    if (this._chronometer.onChronometer.observers == null) {\n      this._chronometer.onChronometer = new Subject<Chronometer>();\n    }\n    this.chronoSub = this._chronometer.onChronometer.subscribe((chronometer: Chronometer) => {\n      this._chronometer = this.activated(this.currentSecond(chronometer));\n    });\n  }\n\n  /**\n   * @description current seconds\n   * @param chronometer object current chronometer\n   * @see {Chronometer}\n   */\n  currentSecond(chronometer: Chronometer): Chronometer {\n    const limitSecond = this.limitSecond || chronometer.limitSecond;\n    if (limitSecond && chronometer.second > limitSecond) {\n      chronometer.second = limitSecond;\n      chronometer.pause();\n      this._chronometer = chronometer;\n      if (this._chronometer.intervalSub) {\n        this._chronometer.intervalSub.unsubscribe();\n      }\n      this._chronometer.intervalSub = undefined;\n    }\n    return chronometer;\n  }\n\n  /**\n   * @description activated chronometer\n   * @param chronometer object current chronometer\n   * @see {Chronometer}\n   */\n  private activated(chronometer: Chronometer = this._chronometer): Chronometer {\n    switch (chronometer.status) {\n      case StatusChonometer.pause:\n        this._chronometer = this.pause(chronometer); break;\n      case StatusChonometer.start:\n        this._chronometer = this.start(this.pause(chronometer));\n        break;\n      case StatusChonometer.restart:\n        chronometer.second = 0;\n        this._chronometer = this.start(chronometer);\n        break;\n      case StatusChonometer.stop:\n        chronometer.second = 0;\n        this._chronometer = this.pause(chronometer);\n        break;\n      default:\n        break;\n    }\n    return this.setTime(chronometer, 0);\n  }\n\n  /**\n   * @description pause seconds\n   * @param chronometer object current chronometer\n   * @see {Chronometer}\n   */\n  private pause(chronometer: Chronometer): Chronometer {\n    return this.stop(chronometer);\n  }\n\n  /**\n   * @description stop seconds\n   * @param chronometer object current chronometer\n   * @see {Chronometer}\n   */\n  private stop(chronometer): Chronometer {\n    if (chronometer.intervalSub) {\n      chronometer.intervalSub.unsubscribe();\n      chronometer.intervalSub = undefined;\n    }\n    return chronometer;\n  }\n\n  /**\n   * @description start seconds\n   * @param chronometer object current chronometer\n   * @see {Chronometer}\n   */\n  private start(chronometer: Chronometer): Chronometer {\n    chronometer.status = 2;\n    if (!chronometer.intervalSub) {\n      chronometer.intervalSub = interval(this.interval).subscribe(() => {\n        chronometer = this.currentSecond(this.setTime(chronometer));\n      });\n    }\n    return chronometer;\n  }\n\n  /**\n   * @description inner the text element\n   * @see {Chronometer}\n   */\n  get innerText(): string {\n    const sep = (this.format || '').split('00');\n    const a = this.isMinutes ? 1 : 0;\n    switch (sep.length) {\n      case 1: return `${sep[0]}${this.timeFormat[a]}${sep[1]}`;\n      case 2: return `${sep[0]}${this.timeFormat[a]}${sep[1]}`;\n      case 3: return `${sep[0]}${this.timeFormat[1]}${sep[1]}${this.timeFormat[0]}${sep[2]}`;\n      case 4: return `${sep[0]}${this.timeFormat[2]}${sep[1]}${this.timeFormat[1]}${sep[2]}${this.timeFormat[0]}${sep[3]}`;\n      default: return `${sep[0]}${this.timeFormat[2]}${sep[1]}${this.timeFormat[1]}${sep[2]}${this.timeFormat[0]}${sep[3]}`;\n    }\n  }\n\n  /**\n   * @description format array time\n   * @see {Chronometer}\n   */\n  get timeFormat(): Array<string> {\n    const time = this._chronometer.time;\n    return Array<string>(\n      this.formatNumber(time[2]),\n      this.formatNumber(time[1]),\n      this.formatNumber(time[0])\n    );\n  }\n\n  /**\n   * @description return string 2 digit\n   * @param n number to format\n   */\n  formatNumber(n: number): string {\n    return `${n > 9 ? n : `0${n}`}`;\n  }\n\n  /**\n   * @description validator number\n   * @param n number to valid\n   */\n  validNumber(n: number) {\n    const enc = !_.isNaN(_.isNumber(n)) && n > 0;\n    if (!enc) {\n      console.error('Outdid maximo time no valid', n);\n      this._chronometer.pause();\n    }\n    return enc ? n : 60;\n  }\n\n  /**\n   * @description\n   * @param chronometer object current chronometer\n   * @see {Chronometer}\n   * @param second increment the time\n   * @see {increment} default [increment]=\"1\"\n   */\n  private setTime(chronometer: Chronometer, second = this.increment): Chronometer {\n    if (chronometer.second >= 0) {\n      chronometer.second = chronometer.second + second;\n      const diffSS = this.validNumber(chronometer.maxSecond);\n      const diffMM = this.validNumber(chronometer.maxMinute);\n      const hh = Math.trunc((chronometer.second / this.validNumber(chronometer.maxSecond)) / this.validNumber(chronometer.maxMinute));\n      const mm = Math.trunc(chronometer.second / this.validNumber(chronometer.maxSecond)) - hh * diffMM;\n      const ss = chronometer.second - Math.trunc(chronometer.second / diffSS) * diffSS;\n      if (hh === chronometer.maxHour) {\n        chronometer.second = 0;\n        chronometer.time = new Array(0, 0, 0);\n      } else {\n        chronometer.time = new Array(hh, mm, ss);\n      }\n    }\n    if (this.chronoEvents) {\n      this.onChronoEvent.emit(chronometer);\n    }\n    return chronometer;\n  }\n\n  ngOnDestroy() {\n    if (this.chronoSub) {\n      this.chronoSub.unsubscribe();\n    }\n    if (this._chronometer.intervalSub) {\n      this._chronometer.intervalSub.unsubscribe();\n    }\n    this._chronometer.onChronometer.unsubscribe();\n  }\n\n}\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { NgxChronometerDirective } from './ngx-chronometer.directive';\n\n\n@NgModule({\n  declarations: [NgxChronometerDirective],\n  imports: [],\n  exports: [NgxChronometerDirective],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class NgxChronometerModule { }\n"]}