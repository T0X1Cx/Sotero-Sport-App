{"version":3,"file":"ngx-chronometer.directive.d.ts","sources":["ngx-chronometer.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnInit, OnDestroy, EventEmitter } from '@angular/core';\nimport { Chronometer } from './ngx-chronometer';\nexport declare class NgxChronometerDirective implements OnInit, OnDestroy {\n    _chronometer: Chronometer;\n    /** sequence the time default 1000 = 1 second */\n    interval: number;\n    /** increment 1 unit */\n    increment: number;\n    /** limit in second stop sequence the time */\n    limitSecond: number;\n    /** maximal second to step minute */\n    maxSecond: number;\n    /** maximal minute to step hour */\n    maxMinute: number;\n    /** maximal hour to reset chronometer */\n    maxHour: number;\n    /** maximal hour to reset chronometer */\n    isMinutes: boolean;\n    /** object chronometer */\n    set chronometer(chronometer: Chronometer);\n    /** format to use default 00:00:00 custom 00/00/00 or other delimiter */\n    format: string;\n    /** activated emit event sequence chronometer default false */\n    chronoEvents: boolean;\n    onChronoEvent: EventEmitter<Chronometer>;\n    private chronoSub;\n    constructor();\n    ngOnInit(): void;\n    /**\n     * @description current seconds\n     * @param chronometer object current chronometer\n     * @see {Chronometer}\n     */\n    currentSecond(chronometer: Chronometer): Chronometer;\n    /**\n     * @description activated chronometer\n     * @param chronometer object current chronometer\n     * @see {Chronometer}\n     */\n    private activated;\n    /**\n     * @description pause seconds\n     * @param chronometer object current chronometer\n     * @see {Chronometer}\n     */\n    private pause;\n    /**\n     * @description stop seconds\n     * @param chronometer object current chronometer\n     * @see {Chronometer}\n     */\n    private stop;\n    /**\n     * @description start seconds\n     * @param chronometer object current chronometer\n     * @see {Chronometer}\n     */\n    private start;\n    /**\n     * @description inner the text element\n     * @see {Chronometer}\n     */\n    get innerText(): string;\n    /**\n     * @description format array time\n     * @see {Chronometer}\n     */\n    get timeFormat(): Array<string>;\n    /**\n     * @description return string 2 digit\n     * @param n number to format\n     */\n    formatNumber(n: number): string;\n    /**\n     * @description validator number\n     * @param n number to valid\n     */\n    validNumber(n: number): number;\n    /**\n     * @description\n     * @param chronometer object current chronometer\n     * @see {Chronometer}\n     * @param second increment the time\n     * @see {increment} default [increment]=\"1\"\n     */\n    private setTime;\n    ngOnDestroy(): void;\n}\n"]}