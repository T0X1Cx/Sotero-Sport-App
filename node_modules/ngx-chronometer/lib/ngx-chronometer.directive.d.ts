import { OnInit, OnDestroy, EventEmitter } from '@angular/core';
import { Chronometer } from './ngx-chronometer';
import * as ɵngcc0 from '@angular/core';
export declare class NgxChronometerDirective implements OnInit, OnDestroy {
    _chronometer: Chronometer;
    /** sequence the time default 1000 = 1 second */
    interval: number;
    /** increment 1 unit */
    increment: number;
    /** limit in second stop sequence the time */
    limitSecond: number;
    /** maximal second to step minute */
    maxSecond: number;
    /** maximal minute to step hour */
    maxMinute: number;
    /** maximal hour to reset chronometer */
    maxHour: number;
    /** maximal hour to reset chronometer */
    isMinutes: boolean;
    /** object chronometer */
    set chronometer(chronometer: Chronometer);
    /** format to use default 00:00:00 custom 00/00/00 or other delimiter */
    format: string;
    /** activated emit event sequence chronometer default false */
    chronoEvents: boolean;
    onChronoEvent: EventEmitter<Chronometer>;
    private chronoSub;
    constructor();
    ngOnInit(): void;
    /**
     * @description current seconds
     * @param chronometer object current chronometer
     * @see {Chronometer}
     */
    currentSecond(chronometer: Chronometer): Chronometer;
    /**
     * @description activated chronometer
     * @param chronometer object current chronometer
     * @see {Chronometer}
     */
    private activated;
    /**
     * @description pause seconds
     * @param chronometer object current chronometer
     * @see {Chronometer}
     */
    private pause;
    /**
     * @description stop seconds
     * @param chronometer object current chronometer
     * @see {Chronometer}
     */
    private stop;
    /**
     * @description start seconds
     * @param chronometer object current chronometer
     * @see {Chronometer}
     */
    private start;
    /**
     * @description inner the text element
     * @see {Chronometer}
     */
    get innerText(): string;
    /**
     * @description format array time
     * @see {Chronometer}
     */
    get timeFormat(): Array<string>;
    /**
     * @description return string 2 digit
     * @param n number to format
     */
    formatNumber(n: number): string;
    /**
     * @description validator number
     * @param n number to valid
     */
    validNumber(n: number): number;
    /**
     * @description
     * @param chronometer object current chronometer
     * @see {Chronometer}
     * @param second increment the time
     * @see {increment} default [increment]="1"
     */
    private setTime;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxChronometerDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NgxChronometerDirective, "[chronometer]", never, { "interval": "interval"; "increment": "increment"; "format": "format"; "chronoEvents": "chronoEvents"; "chronometer": "chronometer"; "limitSecond": "limitSecond"; "maxSecond": "maxSecond"; "maxMinute": "maxMinute"; "maxHour": "maxHour"; "isMinutes": "isMinutes"; }, { "onChronoEvent": "onChronoEvent"; }, never>;
}

//# sourceMappingURL=ngx-chronometer.directive.d.ts.map