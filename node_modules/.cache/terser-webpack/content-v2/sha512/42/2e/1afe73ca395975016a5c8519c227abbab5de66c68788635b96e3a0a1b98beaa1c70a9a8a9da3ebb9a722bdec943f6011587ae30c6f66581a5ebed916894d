{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{yVGo:function(module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,\"TimerPageModule\",function(){return timer_module_TimerPageModule});var common=__webpack_require__(\"ofXK\"),fesm2015_forms=__webpack_require__(\"3Pt+\"),ionic_angular=__webpack_require__(\"TEn/\"),router=__webpack_require__(\"tyNb\"),core=(__webpack_require__(\"gcOT\"),__webpack_require__(\"fXoL\"));Math;const routes=[{path:\"\",component:(()=>{class TimerPage{constructor(){}ngOnInit(){}}return TimerPage.ɵfac=function(t){return new(t||TimerPage)},TimerPage.ɵcmp=core.Eb({type:TimerPage,selectors:[[\"app-timer\"]],decls:2,vars:0,consts:[[\"color\",\"warning\"]],template:function(rf,ctx){1&rf&&(core.Qb(0,\"ion-title\",0),core.uc(1,\"TIMER EN CONSTRUCCION\"),core.Pb())},directives:[ionic_angular.S],styles:[\"ion-icon[_ngcontent-%COMP%]{font-size:1.5em}h3[_ngcontent-%COMP%]{font-size:2.5em;font-weight:600;margin-top:30px;color:#fff!important}#progress-circle[_ngcontent-%COMP%]{margin-top:15px;transform:rotate(-90deg)}.timer-text[_ngcontent-%COMP%]{transform:rotate(90deg);transform-origin:center;font-size:36px;text-anchor:middle;font-weight:700;fill:#fff}\"]}),TimerPage})()}];let timer_routing_module_TimerPageRoutingModule=(()=>{class TimerPageRoutingModule{}return TimerPageRoutingModule.ɵfac=function(t){return new(t||TimerPageRoutingModule)},TimerPageRoutingModule.ɵmod=core.Ib({type:TimerPageRoutingModule}),TimerPageRoutingModule.ɵinj=core.Hb({imports:[[router.i.forChild(routes)],router.i]}),TimerPageRoutingModule})(),ngx_countdown_CountdownTimer=(()=>{class CountdownTimer{constructor(ngZone){this.ngZone=ngZone,this.fns=[],this.commands=[],this.ing=!1}start(){!0!==this.ing&&(this.ing=!0,this.nextTime=+new Date,this.ngZone.runOutsideAngular(()=>{this.process()}))}process(){for(;this.commands.length;)this.commands.shift()();let diff=+new Date-this.nextTime;const count=1+Math.floor(diff/100);diff=100-diff%100,this.nextTime+=100*count;for(let i=0,len=this.fns.length;i<len;i+=2){let frequency=this.fns[i+1];if(0===frequency)this.fns[i](count);else{frequency+=2*count-1;const step=Math.floor(frequency/20);step>0&&this.fns[i](step),this.fns[i+1]=frequency%20+1}}this.ing&&setTimeout(()=>this.process(),diff)}add(fn,frequency){return this.commands.push(()=>{this.fns.push(fn),this.fns.push(1e3===frequency?1:0),this.ing=!0}),this}remove(fn){return this.commands.push(()=>{const i=this.fns.indexOf(fn);-1!==i&&this.fns.splice(i,2),this.ing=this.fns.length>0}),this}}return CountdownTimer.ɵfac=function(t){return new(t||CountdownTimer)(core.Ub(core.B))},CountdownTimer.ɵprov=core.Gb({token:CountdownTimer,factory:CountdownTimer.ɵfac}),CountdownTimer})(),ngx_countdown_CountdownModule=(()=>{class CountdownModule{}return CountdownModule.ɵfac=function(t){return new(t||CountdownModule)},CountdownModule.ɵmod=core.Ib({type:CountdownModule}),CountdownModule.ɵinj=core.Hb({providers:[ngx_countdown_CountdownTimer],imports:[[common.b]]}),CountdownModule})(),timer_module_TimerPageModule=(()=>{class TimerPageModule{}return TimerPageModule.ɵfac=function(t){return new(t||TimerPageModule)},TimerPageModule.ɵmod=core.Ib({type:TimerPageModule}),TimerPageModule.ɵinj=core.Hb({imports:[[common.b,fesm2015_forms.d,ionic_angular.U,ngx_countdown_CountdownModule,timer_routing_module_TimerPageRoutingModule]]}),TimerPageModule})()}}]);","name":"18-es2015.0a250817f78b0278f51d.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[18],{\n\n/***/ \"yVGo\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"TimerPageModule\", function() { return /* binding */ timer_module_TimerPageModule; });\n\n// EXTERNAL MODULE: ./node_modules/@angular/common/__ivy_ngcc__/fesm2015/common.js\nvar common = __webpack_require__(\"ofXK\");\n\n// EXTERNAL MODULE: ./node_modules/@angular/forms/__ivy_ngcc__/fesm2015/forms.js + 1 modules\nvar fesm2015_forms = __webpack_require__(\"3Pt+\");\n\n// EXTERNAL MODULE: ./node_modules/@ionic/angular/__ivy_ngcc__/fesm2015/ionic-angular.js + 7 modules\nvar ionic_angular = __webpack_require__(\"TEn/\");\n\n// EXTERNAL MODULE: ./node_modules/@angular/router/__ivy_ngcc__/fesm2015/router.js + 22 modules\nvar router = __webpack_require__(\"tyNb\");\n\n// EXTERNAL MODULE: ./node_modules/@capacitor/core/dist/esm/index.js + 23 modules\nvar esm = __webpack_require__(\"gcOT\");\n\n// EXTERNAL MODULE: ./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js + 3 modules\nvar core = __webpack_require__(\"fXoL\");\n\n// CONCATENATED MODULE: ./src/app/core/pages/timer/timer.page.ts\n\n\n\nconst { App } = esm[\"a\" /* Plugins */];\nconst circleR = 80;\nconst circleDasharray = 2 * Math.PI * circleR;\nlet timer_page_TimerPage = /*@__PURE__*/ (() => {\n    class TimerPage {\n        constructor() { }\n        ngOnInit() {\n        }\n    }\n    TimerPage.ɵfac = function TimerPage_Factory(t) { return new (t || TimerPage)(); };\n    TimerPage.ɵcmp = core[\"Eb\" /* ɵɵdefineComponent */]({ type: TimerPage, selectors: [[\"app-timer\"]], decls: 2, vars: 0, consts: [[\"color\", \"warning\"]], template: function TimerPage_Template(rf, ctx) {\n            if (rf & 1) {\n                core[\"Qb\" /* ɵɵelementStart */](0, \"ion-title\", 0);\n                core[\"uc\" /* ɵɵtext */](1, \"TIMER EN CONSTRUCCION\");\n                core[\"Pb\" /* ɵɵelementEnd */]();\n            }\n        }, directives: [ionic_angular[\"S\" /* IonTitle */]], styles: [\"ion-icon[_ngcontent-%COMP%]{font-size:1.5em}h3[_ngcontent-%COMP%]{font-size:2.5em;font-weight:600;margin-top:30px;color:#fff!important}#progress-circle[_ngcontent-%COMP%]{margin-top:15px;transform:rotate(-90deg)}.timer-text[_ngcontent-%COMP%]{transform:rotate(90deg);transform-origin:center;font-size:36px;text-anchor:middle;font-weight:700;fill:#fff}\"] });\n    return TimerPage;\n})();\n\n// CONCATENATED MODULE: ./src/app/core/pages/timer/timer-routing.module.ts\n\n\n\n\nconst routes = [\n    {\n        path: '',\n        component: timer_page_TimerPage\n    }\n];\nlet timer_routing_module_TimerPageRoutingModule = /*@__PURE__*/ (() => {\n    class TimerPageRoutingModule {\n    }\n    TimerPageRoutingModule.ɵfac = function TimerPageRoutingModule_Factory(t) { return new (t || TimerPageRoutingModule)(); };\n    TimerPageRoutingModule.ɵmod = core[\"Ib\" /* ɵɵdefineNgModule */]({ type: TimerPageRoutingModule });\n    TimerPageRoutingModule.ɵinj = core[\"Hb\" /* ɵɵdefineInjector */]({ imports: [[router[\"i\" /* RouterModule */].forChild(routes)], router[\"i\" /* RouterModule */]] });\n    return TimerPageRoutingModule;\n})();\n\n// CONCATENATED MODULE: ./node_modules/ngx-countdown/__ivy_ngcc__/fesm2015/ngx-countdown.js\n\n\n\n\nfunction CountdownComponent_ng_container_0_Template(rf, ctx) {\n    if (rf & 1) {\n        core[\"Ob\" /* ɵɵelementContainerStart */](0);\n        core[\"Lb\" /* ɵɵelement */](1, \"span\", 2);\n        core[\"Nb\" /* ɵɵelementContainerEnd */]();\n    }\n    if (rf & 2) {\n        const ctx_r0 = core[\"ac\" /* ɵɵnextContext */]();\n        core[\"zb\" /* ɵɵadvance */](1);\n        core[\"fc\" /* ɵɵproperty */](\"innerHTML\", ctx_r0.i.text, core[\"pc\" /* ɵɵsanitizeHtml */]);\n    }\n}\nfunction CountdownComponent_ng_container_1_Template(rf, ctx) {\n    if (rf & 1) {\n        core[\"Mb\" /* ɵɵelementContainer */](0);\n    }\n}\nconst _c0 = function (a0) { return { $implicit: a0 }; };\nvar CountdownStatus = /*@__PURE__*/ (function (CountdownStatus) {\n    CountdownStatus[CountdownStatus[\"ing\"] = 0] = \"ing\";\n    CountdownStatus[CountdownStatus[\"pause\"] = 1] = \"pause\";\n    CountdownStatus[CountdownStatus[\"stop\"] = 2] = \"stop\";\n    CountdownStatus[CountdownStatus[\"done\"] = 3] = \"done\";\n    return CountdownStatus;\n})({});\nlet ngx_countdown_CountdownTimer = /*@__PURE__*/ (() => {\n    class CountdownTimer {\n        constructor(ngZone) {\n            this.ngZone = ngZone;\n            this.fns = [];\n            this.commands = [];\n            this.ing = false;\n        }\n        start() {\n            if (this.ing === true) {\n                return;\n            }\n            this.ing = true;\n            this.nextTime = +new Date();\n            this.ngZone.runOutsideAngular(() => {\n                this.process();\n            });\n        }\n        process() {\n            while (this.commands.length) {\n                this.commands.shift()();\n            }\n            let diff = +new Date() - this.nextTime;\n            const count = 1 + Math.floor(diff / 100);\n            diff = 100 - (diff % 100);\n            this.nextTime += 100 * count;\n            for (let i = 0, len = this.fns.length; i < len; i += 2) {\n                let frequency = this.fns[i + 1];\n                // 100/s\n                if (0 === frequency) {\n                    this.fns[i](count);\n                    // 1000/s\n                }\n                else {\n                    // 先把末位至0，再每次加2\n                    frequency += 2 * count - 1;\n                    const step = Math.floor(frequency / 20);\n                    if (step > 0) {\n                        this.fns[i](step);\n                    }\n                    // 把末位还原成1\n                    this.fns[i + 1] = (frequency % 20) + 1;\n                }\n            }\n            if (!this.ing) {\n                return;\n            }\n            setTimeout(() => this.process(), diff);\n        }\n        add(fn, frequency) {\n            this.commands.push(() => {\n                this.fns.push(fn);\n                this.fns.push(frequency === 1000 ? 1 : 0);\n                this.ing = true;\n            });\n            return this;\n        }\n        remove(fn) {\n            this.commands.push(() => {\n                const i = this.fns.indexOf(fn);\n                if (i !== -1) {\n                    this.fns.splice(i, 2);\n                }\n                this.ing = this.fns.length > 0;\n            });\n            return this;\n        }\n    }\n    CountdownTimer.ɵfac = function CountdownTimer_Factory(t) { return new (t || CountdownTimer)(core[\"Ub\" /* ɵɵinject */](core[\"B\" /* NgZone */])); };\n    CountdownTimer.ɵprov = core[\"Gb\" /* ɵɵdefineInjectable */]({ token: CountdownTimer, factory: CountdownTimer.ɵfac });\n    return CountdownTimer;\n})();\nlet ngx_countdown_CountdownGlobalConfig = /*@__PURE__*/ (() => {\n    class CountdownGlobalConfig {\n        constructor(locale) {\n            this.locale = locale;\n            this.demand = false;\n            this.leftTime = 0;\n            this.format = 'HH:mm:ss';\n            this.timezone = '+0000';\n            this.formatDate = ({ date, formatStr, timezone }) => {\n                return Object(common[\"s\" /* formatDate */])(new Date(date), formatStr, this.locale, timezone || this.timezone || '+0000');\n            };\n        }\n    }\n    CountdownGlobalConfig.ɵfac = function CountdownGlobalConfig_Factory(t) { return new (t || CountdownGlobalConfig)(core[\"Ub\" /* ɵɵinject */](core[\"w\" /* LOCALE_ID */])); };\n    CountdownGlobalConfig.ɵprov = Object(core[\"Gb\" /* ɵɵdefineInjectable */])({ factory: function CountdownGlobalConfig_Factory() { return new CountdownGlobalConfig(Object(core[\"Ub\" /* ɵɵinject */])(core[\"w\" /* LOCALE_ID */])); }, token: CountdownGlobalConfig, providedIn: \"root\" });\n    return CountdownGlobalConfig;\n})();\nlet ngx_countdown_CountdownComponent = /*@__PURE__*/ (() => {\n    class CountdownComponent {\n        constructor(locale, timer, defCog, cdr, ngZone) {\n            this.locale = locale;\n            this.timer = timer;\n            this.defCog = defCog;\n            this.cdr = cdr;\n            this.ngZone = ngZone;\n            this.frequency = 1000;\n            this._notify = {};\n            this.status = CountdownStatus.ing;\n            this.isDestroy = false;\n            this.i = {};\n            this.left = 0;\n            this.event = new core[\"o\" /* EventEmitter */]();\n        }\n        set config(i) {\n            if (i.notify != null && !Array.isArray(i.notify) && i.notify > 0) {\n                i.notify = [i.notify];\n            }\n            this._config = i;\n        }\n        get config() {\n            return this._config;\n        }\n        /**\n         * Start countdown, you must manually call when `demand: false`\n         */\n        begin() {\n            this.status = CountdownStatus.ing;\n            this.callEvent('start');\n        }\n        /**\n         * Restart countdown\n         */\n        restart() {\n            if (this.status !== CountdownStatus.stop) {\n                this.destroy();\n            }\n            this.init();\n            this.callEvent('restart');\n        }\n        /**\n         * Stop countdown, must call `restart` when stopped, it's different from pause, unable to recover\n         */\n        stop() {\n            if (this.status === CountdownStatus.stop) {\n                return;\n            }\n            this.status = CountdownStatus.stop;\n            this.destroy();\n            this.callEvent('stop');\n        }\n        /**\n         * Pause countdown, you can use `resume` to recover again\n         */\n        pause() {\n            if (this.status === CountdownStatus.stop || this.status === CountdownStatus.pause) {\n                return;\n            }\n            this.status = CountdownStatus.pause;\n            this.callEvent('pause');\n        }\n        /**\n         * Resume countdown\n         */\n        resume() {\n            if (this.status === CountdownStatus.stop || this.status !== CountdownStatus.pause) {\n                return;\n            }\n            this.status = CountdownStatus.ing;\n            this.callEvent('resume');\n        }\n        callEvent(action) {\n            this.event.emit({ action, left: this.left, status: this.status, text: this.i.text });\n        }\n        init() {\n            const { locale, defCog } = this;\n            const config = (this.config = Object.assign(Object.assign(Object.assign({}, new ngx_countdown_CountdownGlobalConfig(locale)), defCog), this.config));\n            // tslint:disable-next-line: no-bitwise\n            const frq = (this.frequency = ~config.format.indexOf('S') ? 100 : 1000);\n            this.status = config.demand ? CountdownStatus.pause : CountdownStatus.ing;\n            this.getLeft();\n            // bind reflow to me\n            const _reflow = this.reflow;\n            this.reflow = (count = 0, force = false) => _reflow.apply(this, [count, force]);\n            if (Array.isArray(config.notify)) {\n                config.notify.forEach((time) => {\n                    if (time < 1) {\n                        throw new Error(`The notify config must be a positive integer.`);\n                    }\n                    time = time * 1000;\n                    time = time - (time % frq);\n                    this._notify[time] = true;\n                });\n            }\n            this.timer.add(this.reflow, frq).start();\n            this.reflow(0, true);\n        }\n        destroy() {\n            this.timer.remove(this.reflow);\n            return this;\n        }\n        /**\n         * 更新时钟\n         */\n        reflow(count = 0, force = false) {\n            if (this.isDestroy) {\n                return;\n            }\n            const { status, config, _notify } = this;\n            if (!force && status !== CountdownStatus.ing) {\n                return;\n            }\n            let value = (this.left = this.left - this.frequency * count);\n            if (value < 1) {\n                value = 0;\n            }\n            this.i = {\n                value,\n                text: config.formatDate({ date: value, formatStr: config.format, timezone: config.timezone }),\n            };\n            if (typeof config.prettyText === 'function') {\n                this.i.text = config.prettyText(this.i.text);\n            }\n            this.cdr.detectChanges();\n            if (config.notify === 0 || _notify[value]) {\n                this.ngZone.run(() => {\n                    this.callEvent('notify');\n                });\n            }\n            if (value === 0) {\n                this.ngZone.run(() => {\n                    this.status = CountdownStatus.done;\n                    this.destroy();\n                    this.callEvent('done');\n                });\n            }\n        }\n        /**\n         * 获取倒计时剩余帧数\n         */\n        getLeft() {\n            const { config, frequency } = this;\n            let left = config.leftTime * 1000;\n            const end = config.stopTime;\n            if (!left && end) {\n                left = end - new Date().getTime();\n            }\n            this.left = left - (left % frequency);\n        }\n        ngOnInit() {\n            this.init();\n            if (!this.config.demand) {\n                this.begin();\n            }\n        }\n        ngOnDestroy() {\n            this.isDestroy = true;\n            this.destroy();\n        }\n        ngOnChanges(changes) {\n            if (!changes.config.firstChange) {\n                this.restart();\n            }\n        }\n    }\n    CountdownComponent.ɵfac = function CountdownComponent_Factory(t) { return new (t || CountdownComponent)(core[\"Kb\" /* ɵɵdirectiveInject */](core[\"w\" /* LOCALE_ID */]), core[\"Kb\" /* ɵɵdirectiveInject */](ngx_countdown_CountdownTimer), core[\"Kb\" /* ɵɵdirectiveInject */](ngx_countdown_CountdownGlobalConfig), core[\"Kb\" /* ɵɵdirectiveInject */](core[\"i\" /* ChangeDetectorRef */]), core[\"Kb\" /* ɵɵdirectiveInject */](core[\"B\" /* NgZone */])); };\n    CountdownComponent.ɵcmp = core[\"Eb\" /* ɵɵdefineComponent */]({ type: CountdownComponent, selectors: [[\"countdown\"]], hostVars: 2, hostBindings: function CountdownComponent_HostBindings(rf, ctx) {\n            if (rf & 2) {\n                core[\"Cb\" /* ɵɵclassProp */](\"count-down\", true);\n            }\n        }, inputs: { config: \"config\", render: \"render\" }, outputs: { event: \"event\" }, features: [core[\"xb\" /* ɵɵNgOnChangesFeature */]], decls: 2, vars: 5, consts: [[4, \"ngIf\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"innerHTML\"]], template: function CountdownComponent_Template(rf, ctx) {\n            if (rf & 1) {\n                core[\"sc\" /* ɵɵtemplate */](0, CountdownComponent_ng_container_0_Template, 2, 1, \"ng-container\", 0);\n                core[\"sc\" /* ɵɵtemplate */](1, CountdownComponent_ng_container_1_Template, 1, 0, \"ng-container\", 1);\n            }\n            if (rf & 2) {\n                core[\"fc\" /* ɵɵproperty */](\"ngIf\", !ctx.render);\n                core[\"zb\" /* ɵɵadvance */](1);\n                core[\"fc\" /* ɵɵproperty */](\"ngTemplateOutlet\", ctx.render)(\"ngTemplateOutletContext\", core[\"ic\" /* ɵɵpureFunction1 */](3, _c0, ctx.i));\n            }\n        }, directives: [common[\"k\" /* NgIf */], common[\"o\" /* NgTemplateOutlet */]], encapsulation: 2, changeDetection: 0 });\n    return CountdownComponent;\n})();\nlet ngx_countdown_CountdownModule = /*@__PURE__*/ (() => {\n    class CountdownModule {\n    }\n    CountdownModule.ɵfac = function CountdownModule_Factory(t) { return new (t || CountdownModule)(); };\n    CountdownModule.ɵmod = core[\"Ib\" /* ɵɵdefineNgModule */]({ type: CountdownModule });\n    CountdownModule.ɵinj = core[\"Hb\" /* ɵɵdefineInjector */]({ providers: [ngx_countdown_CountdownTimer], imports: [[common[\"b\" /* CommonModule */]]] });\n    return CountdownModule;\n})();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && core[\"rc\" /* ɵɵsetNgModuleScope */](ngx_countdown_CountdownModule, { declarations: function () { return [ngx_countdown_CountdownComponent]; }, imports: function () { return [common[\"b\" /* CommonModule */]]; }, exports: function () { return [ngx_countdown_CountdownComponent]; } }); })();\n/**\n * Generated bundle index. Do not edit.\n */\n\n//# sourceMappingURL=ngx-countdown.js.map\n\n// CONCATENATED MODULE: ./src/app/core/pages/timer/timer.module.ts\n\n\n\n\n\n\nlet timer_module_TimerPageModule = /*@__PURE__*/ (() => {\n    class TimerPageModule {\n    }\n    TimerPageModule.ɵfac = function TimerPageModule_Factory(t) { return new (t || TimerPageModule)(); };\n    TimerPageModule.ɵmod = core[\"Ib\" /* ɵɵdefineNgModule */]({ type: TimerPageModule });\n    TimerPageModule.ɵinj = core[\"Hb\" /* ɵɵdefineInjector */]({ imports: [[\n                common[\"b\" /* CommonModule */],\n                fesm2015_forms[\"d\" /* FormsModule */],\n                ionic_angular[\"U\" /* IonicModule */],\n                ngx_countdown_CountdownModule,\n                timer_routing_module_TimerPageRoutingModule\n            ]] });\n    return TimerPageModule;\n})();\n\n\n/***/ })\n\n}]);","inputSourceMap":null}